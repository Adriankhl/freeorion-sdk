From c8469db33c201d264158bef5a63c49be8333ed71 Mon Sep 17 00:00:00 2001
From: Kovid Goyal <kovid@kovidgoyal.net>
Date: Sun, 29 Nov 2015 12:15:13 +0530
Subject: [PATCH] Handle file descriptor verification for VS 2015

Backport patch from python 3.5 to allow compiling with VS 2015, see
https://bugs.python.org/issue23524 for discussion.
---
 Include/fileobject.h               |  4 +--
 Include/pyport.h                   | 19 ++++++++++++
 Modules/_io/fileio.c               | 39 +++++++++++++++++++++++--
 Modules/mmapmodule.c               |  4 ++-
 Modules/posixmodule.c              | 60 +++++++++++++++++++++++++++++++++-----
 Modules/signalmodule.c             |  8 +++--
 PC/invalid_parameter_handler.c     | 22 ++++++++++++++
 PC/msvcrtmodule.c                  |  3 ++
 PCbuild/pythoncore.vcxproj         |  1 +
 PCbuild/pythoncore.vcxproj.filters |  3 ++
 10 files changed, 148 insertions(+), 15 deletions(-)
 create mode 100644 PC/invalid_parameter_handler.c

diff --git a/Include/fileobject.h b/Include/fileobject.h
index 1b540f9..15b7b4a 100644
--- a/Include/fileobject.h
+++ b/Include/fileobject.h
@@ -70,14 +70,14 @@ size_t Py_UniversalNewlineFread(char *, size_t, FILE *, PyObject *);
 */
 int _PyFile_SanitizeMode(char *mode);
 
-#if defined _MSC_VER && _MSC_VER >= 1400
+#if defined _MSC_VER && _MSC_VER >= 1400 && _MSC_VER < 1900
 /* A routine to check if a file descriptor is valid on Windows.  Returns 0
  * and sets errno to EBADF if it isn't.  This is to avoid Assertions
  * from various functions in the Windows CRT beginning with
  * Visual Studio 2005
  */
 int _PyVerify_fd(int fd);
-#elif defined _MSC_VER && _MSC_VER >= 1200
+#elif defined _MSC_VER && _MSC_VER >= 1200 && _MSC_VER < 1900
 /* fdopen doesn't set errno EBADF and crashes for large fd on debug build */
 #define _PyVerify_fd(fd) (_get_osfhandle(fd) >= 0)
 #else
diff --git a/Include/pyport.h b/Include/pyport.h
index 85e852f..1d0e3c8 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -937,5 +937,24 @@ typedef struct fd_set {
 #ifndef Py_ULL
 #define Py_ULL(x) Py_LL(x##U)
 #endif
+#ifdef Py_BUILD_CORE 
+/*
+ * Macros to protect CRT calls against instant termination when passed an
+ * invalid parameter (issue23524).
+ */
+#if defined _MSC_VER && _MSC_VER >= 1900
+
+extern _invalid_parameter_handler _Py_silent_invalid_parameter_handler;
+#define _Py_BEGIN_SUPPRESS_IPH { _invalid_parameter_handler _Py_old_handler = \
+    _set_thread_local_invalid_parameter_handler(_Py_silent_invalid_parameter_handler);
+#define _Py_END_SUPPRESS_IPH _set_thread_local_invalid_parameter_handler(_Py_old_handler); }
+
+#else
+
+#define _Py_BEGIN_SUPPRESS_IPH
+#define _Py_END_SUPPRESS_IPH
+
+#endif /* _MSC_VER >= 1900 */
+#endif /* Py_BUILD_CORE */
 
 #endif /* Py_PYPORT_H */
diff --git a/Modules/_io/fileio.c b/Modules/_io/fileio.c
index 0678ef8..d08251a5 100644
--- a/Modules/_io/fileio.c
+++ b/Modules/_io/fileio.c
@@ -81,7 +81,10 @@ internal_close(fileio *self)
         /* fd is accessible and someone else may have closed it */
         if (_PyVerify_fd(fd)) {
             Py_BEGIN_ALLOW_THREADS
+            _Py_BEGIN_SUPPRESS_IPH
+            errno = 0;
             err = close(fd);
+            _Py_END_SUPPRESS_IPH
             if (err < 0)
                 save_errno = errno;
             Py_END_ALLOW_THREADS
@@ -143,9 +146,14 @@ dircheck(fileio* self, PyObject *nameobj)
 {
 #if defined(HAVE_FSTAT) && defined(S_IFDIR) && defined(EISDIR)
     struct stat buf;
+    int stat_result;
     if (self->fd < 0)
         return 0;
-    if (fstat(self->fd, &buf) == 0 && S_ISDIR(buf.st_mode)) {
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
+    stat_result = fstat(self->fd, &buf);
+    _Py_END_SUPPRESS_IPH
+    if (stat_result == 0 && S_ISDIR(buf.st_mode)) {
         errno = EISDIR;
         PyErr_SetFromErrnoWithFilenameObject(PyExc_IOError, nameobj);
         return -1;
@@ -159,7 +167,12 @@ check_fd(int fd)
 {
 #if defined(HAVE_FSTAT)
     struct stat buf;
-    if (!_PyVerify_fd(fd) || (fstat(fd, &buf) < 0 && errno == EBADF)) {
+    int is_bad_fd;
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
+    is_bad_fd = (!_PyVerify_fd(fd) || (fstat(fd, &buf) < 0 && errno == EBADF));
+    _Py_END_SUPPRESS_IPH
+    if (is_bad_fd) {
         PyObject *exc;
         char *msg = strerror(EBADF);
         exc = PyObject_CallFunction(PyExc_OSError, "(is)",
@@ -488,6 +501,7 @@ fileio_readinto(fileio *self, PyObject *args)
     if (_PyVerify_fd(self->fd)) {
         len = pbuf.len;
         Py_BEGIN_ALLOW_THREADS
+        _Py_BEGIN_SUPPRESS_IPH
         errno = 0;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
         if (len > INT_MAX)
@@ -496,6 +510,7 @@ fileio_readinto(fileio *self, PyObject *args)
 #else
         n = read(self->fd, pbuf.buf, len);
 #endif
+        _Py_END_SUPPRESS_IPH
         Py_END_ALLOW_THREADS
     } else
         n = -1;
@@ -516,9 +531,18 @@ new_buffersize(fileio *self, size_t currentsize)
 #ifdef HAVE_FSTAT
     off_t pos, end;
     struct stat st;
-    if (fstat(self->fd, &st) == 0) {
+    int stat_result;
+
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
+    stat_result = fstat(self->fd, &st);
+    _Py_END_SUPPRESS_IPH
+    if (stat_result == 0) {
         end = st.st_size;
+        _Py_BEGIN_SUPPRESS_IPH
+        errno = 0;
         pos = lseek(self->fd, 0L, SEEK_CUR);
+        _Py_END_SUPPRESS_IPH
         /* Files claiming a size smaller than SMALLCHUNK may
            actually be streaming pseudo-files. In this case, we
            apply the more aggressive algorithm below.
@@ -566,6 +590,7 @@ fileio_readall(fileio *self)
                 return NULL; /* result has been freed */
         }
         Py_BEGIN_ALLOW_THREADS
+        _Py_BEGIN_SUPPRESS_IPH
         errno = 0;
         n = newsize - total;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
@@ -579,6 +604,7 @@ fileio_readall(fileio *self)
                  PyBytes_AS_STRING(result) + total,
                  n);
 #endif
+        _Py_END_SUPPRESS_IPH
         Py_END_ALLOW_THREADS
         if (n == 0)
             break;
@@ -643,12 +669,14 @@ fileio_read(fileio *self, PyObject *args)
 
     if (_PyVerify_fd(self->fd)) {
         Py_BEGIN_ALLOW_THREADS
+        _Py_BEGIN_SUPPRESS_IPH
         errno = 0;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
         n = read(self->fd, ptr, (int)size);
 #else
         n = read(self->fd, ptr, size);
 #endif
+        _Py_END_SUPPRESS_IPH
         Py_END_ALLOW_THREADS
     } else
         n = -1;
@@ -685,6 +713,7 @@ fileio_write(fileio *self, PyObject *args)
 
     if (_PyVerify_fd(self->fd)) {
         Py_BEGIN_ALLOW_THREADS
+        _Py_BEGIN_SUPPRESS_IPH
         errno = 0;
         len = pbuf.len;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
@@ -694,6 +723,7 @@ fileio_write(fileio *self, PyObject *args)
 #else
         n = write(self->fd, pbuf.buf, len);
 #endif
+        _Py_END_SUPPRESS_IPH
         Py_END_ALLOW_THREADS
     } else
         n = -1;
@@ -751,11 +781,14 @@ portable_lseek(int fd, PyObject *posobj, int whence)
 
     if (_PyVerify_fd(fd)) {
         Py_BEGIN_ALLOW_THREADS
+        _Py_BEGIN_SUPPRESS_IPH
+        errno = 0;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
         res = _lseeki64(fd, pos, whence);
 #else
         res = lseek(fd, pos, whence);
 #endif
+        _Py_END_SUPPRESS_IPH
         Py_END_ALLOW_THREADS
     } else
         res = -1;
diff --git a/Modules/mmapmodule.c b/Modules/mmapmodule.c
index 1ebccdf..826cc27 100644
--- a/Modules/mmapmodule.c
+++ b/Modules/mmapmodule.c
@@ -1350,11 +1350,13 @@ new_mmap_object(PyTypeObject *type, PyObject *args, PyObject *kwdict)
      */
     if (fileno != -1 && fileno != 0) {
         /* Ensure that fileno is within the CRT's valid range */
-        if (_PyVerify_fd(fileno) == 0) {
+        if (!_PyVerify_fd(fileno)) {
             PyErr_SetFromErrno(mmap_module_error);
             return NULL;
         }
+        _Py_BEGIN_SUPPRESS_IPH
         fh = (HANDLE)_get_osfhandle(fileno);
+        _Py_END_SUPPRESS_IPH
         if (fh==(HANDLE)-1) {
             PyErr_SetFromErrno(mmap_module_error);
             return NULL;
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index df3c326..2300a7a 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -529,7 +529,7 @@ _PyInt_FromDev(PY_LONG_LONG v)
 #endif
 
 
-#if defined _MSC_VER && _MSC_VER >= 1400
+#if defined _MSC_VER && _MSC_VER >= 1400 && _MSC_VER < 1900
 /* Microsoft CRT in VS2005 and higher will verify that a filehandle is
  * valid and raise an assertion if it isn't.
  * Normally, an invalid fd is likely to be a C program error and therefore
@@ -618,7 +618,7 @@ _PyVerify_fd_dup2(int fd1, int fd2)
         return 0;
 }
 #else
-/* dummy version. _PyVerify_fd() is already defined in fileobject.h */
+/* dummy version, we dont verify fds, we suppress asserts */
 #define _PyVerify_fd_dup2(A, B) (1)
 #endif
 
@@ -861,7 +861,10 @@ posix_fildes(PyObject *fdobj, int (*func)(int))
     if (!_PyVerify_fd(fd))
         return posix_error();
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     res = (*func)(fd);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (res < 0)
         return posix_error();
@@ -6629,7 +6632,10 @@ posix_close_(PyObject *self, PyObject *args)
     if (!_PyVerify_fd(fd))
         return posix_error();
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     res = close(fd);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (res < 0)
         return posix_error();
@@ -6649,9 +6655,13 @@ posix_closerange(PyObject *self, PyObject *args)
     if (!PyArg_ParseTuple(args, "ii:closerange", &fd_from, &fd_to))
         return NULL;
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
     for (i = fd_from; i < fd_to; i++)
-        if (_PyVerify_fd(i))
+        if (_PyVerify_fd(i)) {
+            errno = 0;
             close(i);
+        }
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     Py_RETURN_NONE;
 }
@@ -6670,7 +6680,10 @@ posix_dup(PyObject *self, PyObject *args)
     if (!_PyVerify_fd(fd))
         return posix_error();
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     fd = dup(fd);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (fd < 0)
         return posix_error();
@@ -6691,7 +6704,10 @@ posix_dup2(PyObject *self, PyObject *args)
     if (!_PyVerify_fd_dup2(fd, fd2))
         return posix_error();
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     res = dup2(fd, fd2);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (res < 0)
         return posix_error();
@@ -6738,11 +6754,14 @@ posix_lseek(PyObject *self, PyObject *args)
     if (!_PyVerify_fd(fd))
         return posix_error();
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
     res = _lseeki64(fd, pos, how);
 #else
     res = lseek(fd, pos, how);
 #endif
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (res < 0)
         return posix_error();
@@ -6778,7 +6797,10 @@ posix_read(PyObject *self, PyObject *args)
         return posix_error();
     }
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     n = read(fd, PyString_AsString(buffer), size);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (n < 0) {
         Py_DECREF(buffer);
@@ -6809,6 +6831,8 @@ posix_write(PyObject *self, PyObject *args)
     }
     len = pbuf.len;
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
 #if defined(MS_WIN64) || defined(MS_WINDOWS)
     if (len > INT_MAX)
         len = INT_MAX;
@@ -6816,6 +6840,7 @@ posix_write(PyObject *self, PyObject *args)
 #else
     size = write(fd, pbuf.buf, len);
 #endif
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     PyBuffer_Release(&pbuf);
     if (size < 0)
@@ -6843,7 +6868,10 @@ posix_fstat(PyObject *self, PyObject *args)
     if (!_PyVerify_fd(fd))
         return posix_error();
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     res = FSTAT(fd, &st);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (res != 0) {
 #ifdef MS_WINDOWS
@@ -6864,10 +6892,11 @@ Return an open file object connected to a file descriptor.");
 static PyObject *
 posix_fdopen(PyObject *self, PyObject *args)
 {
-    int fd;
+    int fd, is_bad_fd;
     char *orgmode = "r";
     int bufsize = -1;
     FILE *fp;
+    struct stat buf;
     PyObject *f;
     char *mode;
     if (!PyArg_ParseTuple(args, "i|si", &fd, &orgmode, &bufsize))
@@ -6884,16 +6913,19 @@ posix_fdopen(PyObject *self, PyObject *args)
         PyMem_FREE(mode);
         return NULL;
     }
-    if (!_PyVerify_fd(fd)) {
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
+    is_bad_fd = (!_PyVerify_fd(fd) || fstat(fd, &buf) != 0);
+    _Py_END_SUPPRESS_IPH
+    if (is_bad_fd) {
         PyMem_FREE(mode);
         return posix_error();
     }
 #if defined(HAVE_FSTAT) && defined(S_IFDIR) && defined(EISDIR)
     {
-        struct stat buf;
         const char *msg;
         PyObject *exc;
-        if (fstat(fd, &buf) == 0 && S_ISDIR(buf.st_mode)) {
+        if (S_ISDIR(buf.st_mode)) {
             PyMem_FREE(mode);
             msg = strerror(EISDIR);
             exc = PyObject_CallFunction(PyExc_IOError, "(iss)",
@@ -6914,6 +6946,7 @@ posix_fdopen(PyObject *self, PyObject *args)
         return NULL;
     }
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
 #if !defined(MS_WINDOWS) && defined(HAVE_FCNTL_H)
     if (mode[0] == 'a') {
         /* try to make sure the O_APPEND flag is set */
@@ -6931,6 +6964,7 @@ posix_fdopen(PyObject *self, PyObject *args)
 #else
     fp = fdopen(fd, mode);
 #endif
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     PyMem_FREE(mode);
     if (fp == NULL)
@@ -6952,9 +6986,18 @@ posix_isatty(PyObject *self, PyObject *args)
     int fd;
     if (!PyArg_ParseTuple(args, "i:isatty", &fd))
         return NULL;
+#if defined(_MSC_VER) && _MSC_VER >= 1900
+    int ans;
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
+    ans = _isatty(fd);
+    _Py_END_SUPPRESS_IPH
+    return PyBool_FromLong(ans);
+#else
     if (!_PyVerify_fd(fd))
         return PyBool_FromLong(0);
     return PyBool_FromLong(isatty(fd));
+#endif
 }
 
 #ifdef HAVE_PIPE
@@ -7491,7 +7534,10 @@ posix_fstatvfs(PyObject *self, PyObject *args)
     if (!PyArg_ParseTuple(args, "i:fstatvfs", &fd))
         return NULL;
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     res = fstatvfs(fd, &st);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
     if (res != 0)
         return posix_error();
diff --git a/Modules/signalmodule.c b/Modules/signalmodule.c
index c0e17f3..6e67dd2 100644
--- a/Modules/signalmodule.c
+++ b/Modules/signalmodule.c
@@ -405,7 +405,7 @@ static PyObject *
 signal_set_wakeup_fd(PyObject *self, PyObject *args)
 {
     struct stat buf;
-    int fd, old_fd;
+    int fd, old_fd, is_bad_fd;
     if (!PyArg_ParseTuple(args, "i:set_wakeup_fd", &fd))
         return NULL;
 #ifdef WITH_THREAD
@@ -415,7 +415,11 @@ signal_set_wakeup_fd(PyObject *self, PyObject *args)
         return NULL;
     }
 #endif
-    if (fd != -1 && (!_PyVerify_fd(fd) || fstat(fd, &buf) != 0)) {
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
+    is_bad_fd = (fd != -1 && (!_PyVerify_fd(fd) || fstat(fd, &buf) != 0));
+    _Py_END_SUPPRESS_IPH
+    if (is_bad_fd) {
         PyErr_SetString(PyExc_ValueError, "invalid fd");
         return NULL;
     }
diff --git a/PC/invalid_parameter_handler.c b/PC/invalid_parameter_handler.c
new file mode 100644
index 0000000..3ac1a81
--- /dev/null
+++ b/PC/invalid_parameter_handler.c
@@ -0,0 +1,22 @@
+#ifdef _MSC_VER
+
+#include <stdlib.h>
+
+#if _MSC_VER >= 1900
+/* pyconfig.h uses this function in the _Py_BEGIN_SUPPRESS_IPH/_Py_END_SUPPRESS_IPH
+ * macros. It does not need to be defined when building using MSVC
+ * earlier than 14.0 (_MSC_VER == 1900).
+ */
+
+static void __cdecl _silent_invalid_parameter_handler(
+    wchar_t const* expression,
+    wchar_t const* function,
+    wchar_t const* file,
+    unsigned int line,
+    uintptr_t pReserved) { }
+
+_invalid_parameter_handler _Py_silent_invalid_parameter_handler = _silent_invalid_parameter_handler;
+
+#endif
+
+#endif
diff --git a/PC/msvcrtmodule.c b/PC/msvcrtmodule.c
index 057900d..1fd94e3 100644
--- a/PC/msvcrtmodule.c
+++ b/PC/msvcrtmodule.c
@@ -144,7 +144,10 @@ msvcrt_get_osfhandle(PyObject *self, PyObject *args)
     if (!_PyVerify_fd(fd))
         return PyErr_SetFromErrno(PyExc_IOError);
 
+    _Py_BEGIN_SUPPRESS_IPH
+    errno = 0;
     handle = _get_osfhandle(fd);
+    _Py_END_SUPPRESS_IPH
     if (handle == -1)
         return PyErr_SetFromErrno(PyExc_IOError);
 
